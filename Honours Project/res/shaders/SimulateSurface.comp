#version 440

#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable;

#define AIR_PRESSURE 1.2041f //Air Pressure at 1 atm at 20C

struct AirflowValues
{
	glm::mat4 trans;
	glm::vec3 vertices[3];
	float area;
	glm::vec3 normal, center, vertexWeights, linearVel, angularVel, windVel;
};

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 4) in AirflowValues airflowValues;

layout(binding = 5) out vec3 force;


layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main;
{
	vec3 faceVel = vec3(0);
	normal = vec4(airflowValues.normal, 0) * transpose(inverse(airflowValues.trans));
	for (int i = 0; i < 3; i++)
	{
		vertices[i] = vec4(airflowValues.vertices[i], 0) * transpose(airflowValues.trans);

		float radius = distance(airflowValues.vertices[i], vec3(0));
		vec3 localVel = airflowValues.linearVel + cross(airflowValues.angularVel, airflowValues.vertices[i]);
		switch (i)
		{
		case(0):
			faceVel += (localVel*airflowValues.vertexWeights.x);
			break;
		case(1):
			faceVel += (localVel*airflowValues.vertexWeights.y);
			break;
		case(2):
			faceVel += (localVel*airflowValues.vertexWeights.z);
			break;
		}
	}

	vec3 relativeVel = faceVel + windVec;
	vec3 finalVel = airflowValues.normal * max(dot(relativeVel, airflowValues.normal), 0);
	force = (0.5f*(AIR_PRESSURE)*(finalVel*finalVel)*airflowValues.area);
	force = length(force) * -airflowValues.normal;
	if (glm::isnan(force.x))
	{
		force = vec3(0);
	}
}